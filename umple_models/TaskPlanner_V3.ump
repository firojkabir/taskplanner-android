// BaseTask.ump
class BaseTask {
  String id;
  String title;
  String description;
  TaskState state;
  Date createdAt;
  Date updatedAt;

  enum TaskState { Pending, InProgress, Completed }

  constructor(String title, String description) {
    this.id = java.util.UUID.randomUUID().toString();
    this.title = title;
    this.description = description;
    this.state = TaskState.Pending;
    this.createdAt = new Date();
    this.updatedAt = this.createdAt;
  }

  void start() {
    if (state == TaskState.Pending) state = TaskState.InProgress;
  }

  void complete() {
    if (state == TaskState.InProgress) state = TaskState.Completed;
  }
}

// Task.ump
class Task {
  isA BaseTask;
  0..1 -> * SubTask subtasks;
}


// SubTask.ump
class SubTask {
  isA BaseTask;
  * -> 1 Task parentTask;
}


// TaskController.ump
class TaskController {
  depend Task;
  depend SubTask;

  0..1 -> * Task tasks;

  constructor() { }

  List<Task> getTasks() {
    return tasks;
  }

  void addTask(String title, String description) {
    Task task = new Task(title, description);
    this.addTask(task);
  }

  void addSubTask(String parentId, String title, String description) {
    for (Task task : tasks) {
      if (task.getId().equals(parentId)) {
        SubTask subtask = new SubTask(title, description, task);
        task.addSubtask(subtask);
        break;
      }
    }
  }

  void deleteTask(String id) {
    removeTask(id);
  }
}


// TaskView.ump
interface TaskView {
  depend Task;
  depend SubTask;

  void displayTasks(List<Task> tasks);
  void displaySubtasks(Task task);
  void showNotification(String message);
}

